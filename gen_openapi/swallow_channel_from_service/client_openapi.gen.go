// Package swallow_channel_from_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package swallow_channel_from_service

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// SwallowChannelFromServiceProduct Can be Ticket/Reservation
type SwallowChannelFromServiceProduct struct {
	// Id item ID
	Id *int32 `json:"id,omitempty"`

	// JsonMetadata client side, data, now we not using them,
	//  but in future if field will participate to internal logic need to be added to Product fields
	JsonMetadata *string `json:"jsonMetadata,omitempty"`
}

// SwallowChannelToServiceAvailabilities defines model for swallow_channel_to_service.Availabilities.
type SwallowChannelToServiceAvailabilities struct {
	Count *string                              `json:"count,omitempty"`
	Data  *SwallowChannelToServiceAvailability `json:"data,omitempty"`
}

// SwallowChannelToServiceAvailability defines model for swallow_channel_to_service.Availability.
type SwallowChannelToServiceAvailability struct {
	Currency  *int       `json:"currency,omitempty"`
	DateTime  *time.Time `json:"dateTime,omitempty"`
	ProductId *int32     `json:"productId,omitempty"`
}

// ServiceFromSwallowUpsertProductParams defines parameters for ServiceFromSwallowUpsertProduct.
type ServiceFromSwallowUpsertProductParams struct {
	// Id item ID, if filed exist: Update else Create
	Id *int32 `form:"id,omitempty" json:"id,omitempty"`

	// JsonMetadata client side, data, now we not using them,
	//  but in future if field will participate to internal logic need to be added to Product fields
	JsonMetadata *string `form:"jsonMetadata,omitempty" json:"jsonMetadata,omitempty"`
}

// ServiceToSwallowGetAvailabilityOfProductParams defines parameters for ServiceToSwallowGetAvailabilityOfProduct.
type ServiceToSwallowGetAvailabilityOfProductParams struct {
	RangeGte *time.Time `form:"range.gte,omitempty" json:"range.gte,omitempty"`
	RangeLte *time.Time `form:"range.lte,omitempty" json:"range.lte,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ServiceFromSwallowUpsertProduct request
	ServiceFromSwallowUpsertProduct(ctx context.Context, params *ServiceFromSwallowUpsertProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceToSwallowGetAvailabilityOfProduct request
	ServiceToSwallowGetAvailabilityOfProduct(ctx context.Context, productId int32, params *ServiceToSwallowGetAvailabilityOfProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceFromSwallowGetProduct request
	ServiceFromSwallowGetProduct(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceFromSwallowGetProducts request
	ServiceFromSwallowGetProducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ServiceFromSwallowUpsertProduct(ctx context.Context, params *ServiceFromSwallowUpsertProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceFromSwallowUpsertProductRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceToSwallowGetAvailabilityOfProduct(ctx context.Context, productId int32, params *ServiceToSwallowGetAvailabilityOfProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceToSwallowGetAvailabilityOfProductRequest(c.Server, productId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceFromSwallowGetProduct(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceFromSwallowGetProductRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceFromSwallowGetProducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceFromSwallowGetProductsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewServiceFromSwallowUpsertProductRequest generates requests for ServiceFromSwallowUpsertProduct
func NewServiceFromSwallowUpsertProductRequest(server string, params *ServiceFromSwallowUpsertProductParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JsonMetadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jsonMetadata", runtime.ParamLocationQuery, *params.JsonMetadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceToSwallowGetAvailabilityOfProductRequest generates requests for ServiceToSwallowGetAvailabilityOfProduct
func NewServiceToSwallowGetAvailabilityOfProductRequest(server string, productId int32, params *ServiceToSwallowGetAvailabilityOfProductParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/product-availabilities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RangeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range.gte", runtime.ParamLocationQuery, *params.RangeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RangeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range.lte", runtime.ParamLocationQuery, *params.RangeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceFromSwallowGetProductRequest generates requests for ServiceFromSwallowGetProduct
func NewServiceFromSwallowGetProductRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/product/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceFromSwallowGetProductsRequest generates requests for ServiceFromSwallowGetProducts
func NewServiceFromSwallowGetProductsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ServiceFromSwallowUpsertProductWithResponse request
	ServiceFromSwallowUpsertProductWithResponse(ctx context.Context, params *ServiceFromSwallowUpsertProductParams, reqEditors ...RequestEditorFn) (*ServiceFromSwallowUpsertProductResponse, error)

	// ServiceToSwallowGetAvailabilityOfProductWithResponse request
	ServiceToSwallowGetAvailabilityOfProductWithResponse(ctx context.Context, productId int32, params *ServiceToSwallowGetAvailabilityOfProductParams, reqEditors ...RequestEditorFn) (*ServiceToSwallowGetAvailabilityOfProductResponse, error)

	// ServiceFromSwallowGetProductWithResponse request
	ServiceFromSwallowGetProductWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ServiceFromSwallowGetProductResponse, error)

	// ServiceFromSwallowGetProductsWithResponse request
	ServiceFromSwallowGetProductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServiceFromSwallowGetProductsResponse, error)
}

type ServiceFromSwallowUpsertProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwallowChannelFromServiceProduct
}

// Status returns HTTPResponse.Status
func (r ServiceFromSwallowUpsertProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceFromSwallowUpsertProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceToSwallowGetAvailabilityOfProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwallowChannelToServiceAvailabilities
}

// Status returns HTTPResponse.Status
func (r ServiceToSwallowGetAvailabilityOfProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceToSwallowGetAvailabilityOfProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceFromSwallowGetProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwallowChannelFromServiceProduct
}

// Status returns HTTPResponse.Status
func (r ServiceFromSwallowGetProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceFromSwallowGetProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceFromSwallowGetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwallowChannelFromServiceProduct
}

// Status returns HTTPResponse.Status
func (r ServiceFromSwallowGetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceFromSwallowGetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ServiceFromSwallowUpsertProductWithResponse request returning *ServiceFromSwallowUpsertProductResponse
func (c *ClientWithResponses) ServiceFromSwallowUpsertProductWithResponse(ctx context.Context, params *ServiceFromSwallowUpsertProductParams, reqEditors ...RequestEditorFn) (*ServiceFromSwallowUpsertProductResponse, error) {
	rsp, err := c.ServiceFromSwallowUpsertProduct(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceFromSwallowUpsertProductResponse(rsp)
}

// ServiceToSwallowGetAvailabilityOfProductWithResponse request returning *ServiceToSwallowGetAvailabilityOfProductResponse
func (c *ClientWithResponses) ServiceToSwallowGetAvailabilityOfProductWithResponse(ctx context.Context, productId int32, params *ServiceToSwallowGetAvailabilityOfProductParams, reqEditors ...RequestEditorFn) (*ServiceToSwallowGetAvailabilityOfProductResponse, error) {
	rsp, err := c.ServiceToSwallowGetAvailabilityOfProduct(ctx, productId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceToSwallowGetAvailabilityOfProductResponse(rsp)
}

// ServiceFromSwallowGetProductWithResponse request returning *ServiceFromSwallowGetProductResponse
func (c *ClientWithResponses) ServiceFromSwallowGetProductWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ServiceFromSwallowGetProductResponse, error) {
	rsp, err := c.ServiceFromSwallowGetProduct(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceFromSwallowGetProductResponse(rsp)
}

// ServiceFromSwallowGetProductsWithResponse request returning *ServiceFromSwallowGetProductsResponse
func (c *ClientWithResponses) ServiceFromSwallowGetProductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServiceFromSwallowGetProductsResponse, error) {
	rsp, err := c.ServiceFromSwallowGetProducts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceFromSwallowGetProductsResponse(rsp)
}

// ParseServiceFromSwallowUpsertProductResponse parses an HTTP response from a ServiceFromSwallowUpsertProductWithResponse call
func ParseServiceFromSwallowUpsertProductResponse(rsp *http.Response) (*ServiceFromSwallowUpsertProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceFromSwallowUpsertProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwallowChannelFromServiceProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceToSwallowGetAvailabilityOfProductResponse parses an HTTP response from a ServiceToSwallowGetAvailabilityOfProductWithResponse call
func ParseServiceToSwallowGetAvailabilityOfProductResponse(rsp *http.Response) (*ServiceToSwallowGetAvailabilityOfProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceToSwallowGetAvailabilityOfProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwallowChannelToServiceAvailabilities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceFromSwallowGetProductResponse parses an HTTP response from a ServiceFromSwallowGetProductWithResponse call
func ParseServiceFromSwallowGetProductResponse(rsp *http.Response) (*ServiceFromSwallowGetProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceFromSwallowGetProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwallowChannelFromServiceProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServiceFromSwallowGetProductsResponse parses an HTTP response from a ServiceFromSwallowGetProductsWithResponse call
func ParseServiceFromSwallowGetProductsResponse(rsp *http.Response) (*ServiceFromSwallowGetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceFromSwallowGetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwallowChannelFromServiceProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
